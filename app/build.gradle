apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

ext.java_version = JavaVersion.VERSION_1_8

android {
    compileSdkVersion android_version
    defaultConfig {
        applicationId "com.gmail.yaroslavlancelot.technarium"
        minSdkVersion 21
        targetSdkVersion android_version
        buildToolsVersion android_build_tools
        versionCode 2
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs 'en', 'uk', 'ru'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }
    signingConfigs {
        release {
            Properties passwordProperties = new Properties()
            def propertiesFile = new File(projectDir.path + '/signing/passwords.properties')
            if (propertiesFile.exists()) {
                propertiesFile.withInputStream {
                    passwordProperties.load(it)
                }
            }
            keyAlias passwordProperties.alias as String
            keyPassword passwordProperties.key_password as String
            storePassword passwordProperties.store_password as String
            storeFile file("signing/technarium_keystore.der")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        targetCompatibility = java_version
        sourceCompatibility = java_version
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin/'
        test.java.srcDirs += 'src/test/kotlin/'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation(
            //kotlin
            "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
            //android
            'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3',
            'androidx.core:core-ktx:1.2.0',
            "androidx.navigation:navigation-fragment-ktx:$navigation_version",
            "androidx.navigation:navigation-ui-ktx:$navigation_version",
            "android.arch.lifecycle:extensions:$android_arch_version",
            "android.arch.lifecycle:viewmodel:$android_arch_version",
            "androidx.preference:preference:$androix_material",
            //DB
            "androidx.room:room-runtime:$room_version",
            "androidx.room:room-ktx:$room_version",
            //UI
            "androidx.constraintlayout:constraintlayout:2.0.0-beta4",
            "androidx.recyclerview:recyclerview:$androix_material",
            "com.google.android.material:material:$androix_material",
            'com.github.ybq:Android-SpinKit:1.4.0',
            'com.makeramen:roundedimageview:2.3.0',
            'jp.wasabeef:recyclerview-animators:3.0.0',
            'pub.hanks:smallbang:1.2.2',
            //network
            "com.squareup.retrofit2:retrofit:$retrofit_version",
            "com.squareup.retrofit2:converter-simplexml:$retrofit_version",
            "com.squareup.okhttp3:okhttp:$okhttp_version",
            //DI
            "com.google.dagger:dagger-android:$dagger_version",
            "com.google.dagger:dagger-android-support:$dagger_version",
            //debugging
            'com.jakewharton.timber:timber:4.7.1')
    kapt(
            //DB
            "androidx.room:room-compiler:$room_version",
            //DI
            "com.google.dagger:dagger-compiler:$dagger_version",
            "com.google.dagger:dagger-android-processor:$dagger_version")
    //debug
    debugImplementation(
            //leaks check
            'com.squareup.leakcanary:leakcanary-android:2.1'
    )
    // tests
    testImplementation(
            //unit tests
            "com.squareup.okhttp3:mockwebserver:$okhttp_version",
            'androidx.test:core:1.0.0',
            'io.mockk:mockk:1.9.3',
            'org.robolectric:robolectric:4.3.1',
            'androidx.test:core:1.2.0',
            'androidx.test.ext:junit:1.1.1',
            'junit:junit:4.13')
    kaptTest(
            "com.google.dagger:dagger-compiler:$dagger_version")
    androidTestImplementation(
            //unit tests
            'androidx.test.ext:junit:1.1.1',
            //on device
            'androidx.test.espresso:espresso-core:3.2.0')
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = java_version
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
